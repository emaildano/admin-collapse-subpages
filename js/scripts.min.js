/**
 * Collapse Sub Pages
 */
 
jQuery().ready(function ($) {
    "use strict";

  var links ='<li class="expand_all_link"> | <a href="javascript:void(0);">Expand All</a></li><li class="collapse_all_link"> | <a href="javascript:void(0);">Collapse All</a></li>';
  /*
   * Add Expand/Collapse ALL Links to DOM (has to be first for listeners)
   */
  jQuery(' .acs-hier .subsubsub').append(links);  

  /*
   * Initial loading
   */
    initial_collapse_work();
    reset_listeners();
  
  /*
   * Does all initial stuff (adding plus/minus buttons, adding top links, perform initial collapse)
   */ 
  function initial_collapse_work(){

    /*
     * Loop through to add parent and post-id data
     */ 

    jQuery('.pages #the-list tr').each(function(){
      
      var parent = jQuery(this).find('.post_parent').html();
      var id = jQuery(this).find('[name="post[]"]').attr('value');
  
      jQuery(this).attr('data-parent', parent);
      jQuery(this).attr('data-post-id', id);
      jQuery(this).attr('data-collapsed', 0);
      
    });
    
    /*
     * Loop through again to add +/- as needed
     */
    jQuery('.pages #the-list tr').each(function(){
      
      var id = jQuery(this).find('[name="post[]"]').attr('value');
  
      if(jQuery('#the-list').find('[data-parent="' + id + '"]').size() > 0)
        jQuery(this).find('.page-title strong').append('</span><span class="ab-icon"><a href="javascript:void(0);" class="minus"></a></span>');      
    });
    
    /*
     * Collapse from cookie to start with
     */
    collapse_from_cookie();
    
    
  }
  
  function reset_listeners()
  {
    /*
     * Called on click, expands and contracts pages by calling functions below
     */ 
    jQuery('.ab-icon').click(function(){
      
      var row = jQuery(this).closest('tr');   
      var post_id = row.attr('data-post-id');
        
      jQuery(this).children('a').toggleClass('minus');  
        
      if(row.attr('data-collapsed') == 0)
      { 
        //make cookie here
        add_to_cookie(post_id);   
      
        collapse_subpages(post_id);
        row.attr('data-collapsed', 1);
      }
      else
      { 
        //remove from cookie if exists
        remove_from_cookie(post_id);
      
        expand_subpages(post_id);
        row.attr('data-collapsed', 0);
      }   
    });
  
    /*
     * Called on click when "Quick Update" is used
     */   
    jQuery('.inline-edit-save .save').click(function(){
      
      /*
       * delay before reset, allows WordPress to finish reseting rows 
       * (not ideal, but the "Quick Edit" is a little wonky to begin with)
       */
      setTimeout(function(){
      
        //console.log(jQuery('#the-list tr'));
    
        jQuery('#the-list tr').show();
        jQuery('.expand_link').remove();
            
        //redo collapses
        initial_collapse_work();  
        reset_listeners();

      }, 1000); 
          
    }); 
    
    /*
     * Expand and collapse all links
     */   
    jQuery('.expand_all_link a').click(function(){
      expand_all();
    });     
    jQuery('.collapse_all_link a').click(function(){
      collapse_all();
    });   
  }
  
  function collapse_all()
  { 
    jQuery('.pages #the-list tr').each(function(){
    
      var post_id = jQuery(this).attr('data-post-id');    
    
      if(jQuery(this).attr('data-collapsed') == 0)
      {       
        //make cookie here
        add_to_cookie(post_id);   
      
        collapse_subpages(post_id);
        jQuery(this).attr('data-collapsed', 1).find('.expand_link a').toggleClass('minus');
        
      }         
    });
  } 
  function expand_all()
  {
    jQuery('.pages #the-list tr').each(function(){
    
      var post_id = jQuery(this).attr('data-post-id');    
            
      if(jQuery(this).attr('data-collapsed') == 1)
      { 
        //remove from cookie if exists
        remove_from_cookie(post_id);
      
        expand_subpages(post_id);
        jQuery(this).attr('data-collapsed', 0).find('.expand_link a').toggleClass('minus');
      } 
    }); 
  }
  
  /*
   * Two recursive functions that show/hide the table rows
   */  
  function collapse_subpages(parent_id)
  {   
    jQuery('#the-list').find('[data-parent="' + parent_id + '"]').each(function(){
      
      jQuery(this).hide();
      
      collapse_subpages(jQuery(this).attr('data-post-id'));   
    });
  } 
  function expand_subpages(parent_id)
  {   
    jQuery('#the-list').find('[data-parent="' + parent_id + '"]').each(function(){
      
      jQuery(this).show();
      
      //does not unhide rows if group was previously hidden
      if(jQuery(this).attr('data-collapsed') == 0)
        expand_subpages(jQuery(this).attr('data-post-id'));
    });
  } 

  /*
   * Add value to cookie
   */ 
   function add_to_cookie(row_id)
   {
    var cookie = $.cookie('collapsed');
    var values;
    
    if(cookie){   
      values = cookie.split(',');
      if(jQuery.inArray(row_id, values) == -1)
        values.push(row_id);  
    }else{      
      values = new Array(row_id);   
    }   
    
    $.cookie('collapsed',values);
    
   }

  /*
   * Remove value from cookie
   */    
   function remove_from_cookie(row_id)
   {
    var cookie = $.cookie('collapsed');
    var values;
    
    if(cookie){   
      values = cookie.split(',');

      values = jQuery.grep(values, function(value) {
            return value != row_id;
          }); 
          
      $.cookie('collapsed',values);
            
    }   
   }
   
  /*
   * Read cookie and expand pages as needed
   */     
  function collapse_from_cookie()
  {
    var cookie = $.cookie('collapsed');
    var values;
    
    if(cookie){   
      values = cookie.split(',');

      jQuery.each(values,function(index, value){
        jQuery('#the-list').find('[data-post-id="' + value + '"]').attr('data-collapsed', 1).find('.expand_link a').toggleClass('minus');
      }); 

      jQuery.each(values,function(index, value){
        collapse_subpages(value);
      });       
    } 
  }

});

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));
